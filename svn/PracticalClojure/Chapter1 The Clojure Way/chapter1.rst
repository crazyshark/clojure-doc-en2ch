===========================通往Clojure之路===========================-----------------------Clojure 的理念和特性-----------------------什么是Clojure,为什么有人要学这门语言? 总的来说,那些认为 Clojure会在现有的大多数编程语言中取得成功的人至少基于这样一个理由:  **它是一门新的,支持并发的语言** .而那些对lisp语言缺乏了解的人却往往会认为:这是一门相当奇怪的,充斥着令人困惑的 圆括号 和 方括号 的语言.但是,不争的事实是,Clojure 在市场上赢得比其他新诞生的编程语言更多的追捧和表现了更强的发展势头. 它第一个对外的发行版是在 2007年秋季的时候发布的,在2009年5月发行了第一个稳定版,到这个时候,它已经培育了一个活跃的,充满热情的社区,一个欣欣向荣的开发工具和类库的生态系统,它们被用在迅速增长的一系列专业的应用程序中.下一代的语言==================每一年,在世界范围内的众多机构中的都有很多有才华的计算机科学家通过发表成千上万的论文来阐发它们新的和有趣的想法. 这些新的概念在经受了自然选择和沉淀后,其中那些优秀和有用的部分会被准许进入实际的应用环境中.Clojure 包括了众多 尚未在其他(任何)编程语言的实现中出现的 最新的想法和伟大的理念.这其中最引人注目的就是涉及 并发程序 的部分:  软件内存交互和基于代理的进程调度(Software Transactional Memory and agent-based processing ) 被 "烧录进" (嵌入)到Clojure编程语言的底层. 除此之外(例如 持续不可更改 persistent immutability) 还拥有很多精妙的设计理念,这些设计理念是现代学术研究的成果,也是数十载实践的经验.抛开Clojure的学术背景,Clojure 是主要设计原则是坚持: 有用性(useful 有益处的) 高于可用性.  它的高级属性是被精心选择的,目的是向程序员提供 健壮的、干净的代码，以便程序员容易理解和高效编程. Clojure虽然有很强的学术背景支持,但是绝不是一门只在象牙塔中的语言,每天都有众多开发者在各自的开发领域内使用它.动态而强有力 (没错,它是lisp!)==================================对下面语句的意思的理解会因为读者编程经验的不同而有很大差异,它可能会让你非常兴奋,页可能让你产生一些轻微的不适. **Clojure 是完全的,真正意义上的神圣的lisp语言的一个方言**lisp语言因为其无以伦比强大能力和几乎无穷的表达力而获得了盛誉,Clojure自然也不例外.它的功能和元编程的能力是建立在这样的基础之上的:异常驯服的C语言的"石头" 或 具有延展性的java语言的"木头" . 你可以用几百行甚至几十行Clojure代码取替代几千行静态语言的代码,伴随着这而来的是bug数量的减少和开发时间的缩短.样板代码(Boilerplate code )被完全删去. 域指定语言(Domain Specific Languages ) 不仅简单,而且更一般化--lisp程序往往是按照 "自下而上" 的开发方式写成的. 展开式(演进式)的结构和语法更适合特定的问题领域. 你在程序运行的时候取修改程序,而不需要重新编译或重启程序.但是,历史上也有对lisp进行诋毁的人,或许称为抱怨更为合适. lisp发展过程中,没有完整的规范,各种不兼容的实现,陈旧落伍的限制.cruft accumulate 在其存在的四五十年里一直存在. 对于大多数人来说,它的语法过于诡异了.Clojure 修正上面的大多数这些问题. 它保留了 lisp 的思想和哲学,并同时清除了过去的很多限制.Clojure 高速、干净、具有优先能力和优雅的特征. 但是没有改变lisp中 "代码也是数据" 的哲学.Clojure 语言在直觉和观感上比历史上的lisp更易于阅读. 在后面开始学习的初级阶段,你就发现虽然仍有各种括号,但是代码是难以置信的容易读和写.对于那些熟悉lisp语言的人来说,他们很快就会发现他们非常适应Clojure. 对于那些原先没有接触过lisp的人来说,也没有必要担心. Clojure是简洁和无痛学习lisp语言的方法,它更容易让人们对lisp燃起热情,而不需要经受上面提到的那些不好的东西.如果你坚持来下,那么在你玩了几周的代码之后,你很可能会喜欢喜欢上它,甚至是它的括号.Java平台======================无论你是否喜欢Java语言, Java虚拟机都是非常好的值得尊敬的软件.它是成熟、稳定和迅速的。作为一个工业标准,它有成千上万的经过良好测试的应用于各个方面类库.很多公司都在Java平台上进行了巨大投资.因为运行在Java虚拟机上,Clojure是可以很容易获取和使用的.它不仅仅是移植到Java虚拟机上的一门语言:Clojure是重新设计,运行在Java环境下,能与Java进行容易整合的语言.对于程序开发,它同样是非常出色的,不管是作为一个完整的,独立的语言,还是作为在Java程序中内嵌的脚本工具使用.它可以在任何Java能够运行的环境下使用,而且在更多情况下更容易编写.-------------------函数式编程-------------------clojure的一个关键特性是它是一门函数式语言,这意味着函数是作为程序的基础构建块而不是作为命令(指令)存在的,不像其他编程语言一样(例如命令式的语言).函数式编程提供了一些比命令式语言更重要的益处.这些会在本部分被讨论. 函数式的风格是Clojure与生俱来的,并且是它的理念的核心... note::   几乎所有的编程语言都提供了一个被称为函数的构造形式.在大多数编程语言中,最好把函数   理解为子程序,是为了方便使用,而将一组相关的代码进行汇集起来供使用.   在Clojure和其他函数式语言中,其中关于函数的概念更像是数学中的概念--一个函数是一个   简单的操作,获取一定数量的参数(又称自变量) 然后返回一个值.命令式语言通过执行大量的指令来执行一个复杂的任务,这些指令按照顺序修改程序状态,知道达到期望的结果.而函数式语言完成同样的目标,是通过对不同函数的嵌套组合--将一个函数的结果作为参数传递给下一个函数,直至达到最后的目标.通过编写和串接函数,还有函数的迭代,一个函数式程序可以表达出任何计算机能够完成的任务. 一个完整的程序式程序可以被看做是一个单一的函数,是一个由众多子函数组合在一起而定义的函数.嵌套结构决定了程序的执行顺序,而所有的数据则是通过函数的参数和返回值来进行处理的... image:: figure1.1.png   :width: 70%.. image:: figure1.2.png   :width: 70%事实上,这正式那些不熟悉函数式编程的人认为Clojure代码看起来非常奇怪的原因.Clojure是被优化用来更方便地表达函数组合,而不是用来表达指令块地. 随着你对函数式语言经验和理解地增长,你会觉得Clojure地语法越来越自然.***********************************函数式和指令式地等价在计算机科学上的一个重要的事实是,函数式计算模型和指令式计算模型是正式等价的,所以它们都拥有表达任何可能的计算任务的能力.***********************************纯粹的函数式编程=========================**纯函数** 是函数式编程中的一个重要概念,就像figure1-3显示的. 
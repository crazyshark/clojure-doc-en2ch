==章九 多路方法和层次结构==

===没有类的运行时多态===
<p>
以传统的对类和方法的观点来看，Clojure不是一门面向对象的语言，虽然它构建在Java面向对象的基础设施之上。<br/>
大多数主流的，像Java和C++这样的面向对象语言，用类定义树形的类型层次结构，并提供这些类型所包含的方法的实现。<br/>
Clojure分离了类型层次结构和方法实现，极大地简化了多重继承带来的问题。另外，它允许你在同一个类型上建立多重的，独立的层级结构。这使得定义更贴近现实世界的IS-A关系模型成为可能 。
</p>

===多路方法===
<p>
Clojure 多路方法为运行时多态的分发提供了支持。它允许你给一个方法定义提供多个实现。在运行时，哪个实现被执行取决于方法被赋予的参数。<br/>
很多面向对象语言的方法分发，是单变量的、基于类型的，哪个方法被执行，完全由第一个参数所属的类型或类来决定。方法在第一个参数上被调用。Java和C++都把第一个参数放到方法名前面来明确它的重要意义。<br/>
Clojure 多路方法更为灵活。它支持多重分派，任何变量都能把实现挂到同一个方法上。同样地，分发将基于变量的任何特征，而不单单是类型。<br/>
多路方法使用关键字***defmulti***创建，使用***defmethod***实现。
<code>
(defmulti name dispatch-fn)
(defmethod multifn dispatch-value `[args...`] & body)
</code>

多路方法的调用和普通方法是一样的。当你调用它的时候，分发函数被赋予和多路方法相同的参数立即被调用。分发函数返回的值叫做分发值。然后Clojure搜索分发值对应的方法（由defmethod定义）。<br/>
假设你在写一个幻想类角色扮演游戏，里面有不同种类的生物：人类、精灵、兽人、等等。每个生物用一个map描述，如下：
<code>
(def a {:name "Arthur", :species ::human, :strength 8})
(def b {:name "Balfor", :species ::elf, :strength 7})
(def c {:name "Calis", :species ::elf, :strength 5})
(def d {:name "Drung", :species ::orc, :strength 6})
</code>

将名称空间限定的关键字用于物种（::human代替:human），这个后面详述起重要性。（第七章有关于限定关键字的解释）<br/>
现在你可以定义一个区分不同物种生物的多路方法。例如，你能够给每个物种不同的移动方式。
<code>
(defmulti move :species)

 (defmethod move ::elf `[creature`]
    (str (:name creature) " runs swiftly."))

 (defmethod move ::human `[creature`]
    (str (:name creature) " walks steadily."))

 (defmethod move ::orc `[creature`]
    (str (:name creature) " stomps heavily."))
</code>

当你调用***move***的时候，适当的方法会被调用。
<code>
user=> (move a)
"Arthur walks steadily."
user=> (move b)
"Balfor runs swiftly."
user=> (move c)
"Calis runs swiftly."
</code>

发生了什么？当你调用***（move a）***，首先Clojure为定义于关键字***:species***上的***move***多路方法调用分发方法。那个关键字，会被用于从map中找到一个对应值。所以***（move a）***调用***（:space a）***，返回***::human***。然后Clojure会为***move***找到一个分发值为***::human***的方法，调用它。<br/>
相同的行为可以被有条件地实现。多路方法的优点是你能在任何时候添加新方法。当你增加一个新物种生物的时候，你可以简单的定义另一个***move***方法，而不用修改以后的代码。<br/>
分发方法可不是只能使用简单的关键字；任何函数都是可以的。例如，你能让分发方法按照力量对生物分类。
<code>
(defmulti attack (fn `[creature`]
                    (if (> (:strength creature) 5)
                        :strong
                        :weak)))

 (defmethod attack :strong `[creature`]
    (str (:name creature) " attacks mightily."))

 (defmethod attack :weak `[creature`]
    (str (:name creature) " attacks feebly."))
</code>

当你调用***attack***多路方法的时候，会先调用匿名方法***fn***，它返回***:strong***或者***:weak***。这个关键词（分发值）决定了哪个***attack***方法被掉用。
<code>
user=> (attack c)
"Calis attacks feebly."
user=> (attack d)
"Drung attacks mightily."
</code>
</p>

====多重分发====
<p>
就像我在这章最开始时候说的那样，多路方法提供了对多参数的分发的支持。为了做到这点，分发方法返回一个vecter。例如，在游戏中，定义一个多路方法描述两个不同物种碰面时候会发生什么。比方说精灵，它们和兽人敌对，和其他种族友好：
<code>
(defmulti encounter (fn `[x y`]
                        `[(:species x) (:species y)`]))
(defmethod encounter `[::elf ::orc`] `[elf orc`]
    (str "Brave elf " (:name elf)
        " attacks evil orc " (:name orc)))
(defmethod encounter `[::orc ::elf`] `[orc elf`]
    (str "Evil orc " (:name orc)
        " attacks innocent elf " (:name elf)))
(defmethod encounter `[::elf ::elf`] `[orc1 orc2`]
    (str "Two elves, " (:name orc1)
        " and " (:name orc2)
        ", greet each other."))
</code>

注意方法和多路方法的参数名不必相同，但是分发方法和方法的参数数量必须相同。<br/>
现在以两个生物为参数调用***encounter***多路放下，看会发生什么：
<code>
user=> (encounter b c)
"Two elves, Balfor and Calis, greet each other."
user=> (encounter d b)
"Evil orc Drung attacks innocent elf Balfor"
</code>
</p>

====默认分派值====
<p>
注意你并没有为所有物种的组合都定义***encounter***方法。如果你试图用一个未知的组合调用***encounter***，将会报错：
<code>
user=> (encounter a c)
java.lang.IllegalArgumentException:
No method in multimethod 'encounter'
for dispatch value: `[:user/human :user/elf`]
</code>

或者你能保证定义对所有可能的组合都可用的方法，或者你以关键字***:default***为分发值提供一个默认实现。
<code>
(defmethod encounter :default `[x y`]
    (str (:name x) " and " (:name y)
        " ignore each other."))
</code>

默认方法将在没有其他方法匹配得上的时候被调用：
<code>
user=> (encounter a c)
"Arthur and Calis ignore each other."
</code>

你可以像下面这样，给***defmulti***增加一个***:default***选项来提供一个可选的默认分发值：
<code>
(defmulti talk :species :default "other")
(defmethod talk ::orc `[creature`]
    (str (:name creature) " grunts."))
(defmethod talk "other" `[creature`]
    (str (:name creature) " speaks."))
</code>
</p>

===层次结构===
<p>
在很多面向对象的语言中，类型层次结构都是由类和子类间的继承关系隐式定义的。类也定义方法实现，这种关系显得紧凑但不灵活，尤其在像C++那样允许多继承的语言中。Java不允许多继承避开了这个问题，但是这又使得对现实世界建模变得很困难。<br/>
在Clojure中，继承和方法实现是完全分离的，所以它比基于类继承结构更灵活。它支持几乎所有的组合关系，包括多继承和多根。<br/>
Clojure定义一个叫做“global”的层次，我们把它描述为第一个。你也可以定义独立的层级结构，在本节最后会讨论这个问题。<br/>
<code>
(derive child parent)
</code>

derive在亲和子之间创建一个IS-A关系。亲和子以标签的形式被引用，因为它们被用于标识类型或者类别。标签可以是关键字或者符号，而且（在global层次）必须是名称空间限定（参考第7章）的。<br/>
继续说幻想游戏，你可以定义生物的类型用于共享特定的属性。例如，人类和精灵都是好的而兽人是坏的：
<code>
user=> (derive ::human ::good)
user=> (derive ::elf ::good)
user=> (derive ::orc ::evil)
</code>

精灵和兽人是魔法生物：
<code>
user=> (derive ::elf ::magical)
user=> (derive ::orc ::magical)
</code>

为了添加点儿乐趣，再增加一种特殊的人类，英雄：
<code>
user=> (derive ::hero ::human)
</code>

我们创建了如附表9-1所示的关系图。
***figure-9-1.jpg here***
</p>

====查询层次结构====
<p>
一旦你定义好这些关系，你就可以用***isa?***方法来查询它们：
<code>
(isa? child parent)
</code>

当子派生于（直接或者间接地）亲的时候，***isa?***返回***true***。如一下代码所示：
<code>
user=> (isa? ::orc ::good)
false
user=> (isa? ::hero ::good)
true
user=> (isa? ::hero ::magical)
false
</code>

当子和亲相同（由Clojure的=函数定义）的时候，***isa?***同样会返回***true***：
<code>
user=> (isa? ::human ::human)
true
</code>
</p>

===多路方法的层次结构===
<p>
当多路方法在查找正确的方法调用的时候，它会使用***isa?***方法比较分发值。也就是说多路方法不仅能够对显式的类型进行分发，对派生也同样有效。这是一个只作用于魔法生物的多路方法：
<code>
(defmulti cast-spell :species)

 (defmethod cast-spell ::magical `[creature`]
    (str (:name creature) " casts a spell."))

 (defmethod cast-spell :default `[creature`]
    (str "No, " (:name creature) " is not magical!"))

 user=> (cast-spell c)
"Calis casts a spell."
user=> (cast-spell a)
"No, Arthur is not magical!"
</code>

当分发值是一个vector的时候，多路方法用***isa?***从左到右比较vector的每一个元素，多参数组合分发到层级结构。例如，你可以基于好、坏生物，重新定义你的multimethod多路方法。
<code>
(defmulti encounter (fn `[x y`]
                        `[(:species x) (:species y)`]))

 (defmethod encounter `[::good ::good`] `[x y`]
    (str (:name x) " and " (:name y) " say hello."))

 (defmethod encounter `[::good ::evil`] `[x y`]
    (str (:name x) " is attacked by " (:name y)))

 (defmethod encounter `[::evil ::good`] `[x y`]
    (str (:name x) " attacks " (:name y)))

 (defmethod encounter :default `[x y`]
    (str (:name x) " and " (:name y)
        " ignore one another."))

 user=> (encounter c a)
"Calis and Arthur say hello."
user=> (encounter a d)
"Arthur is attacked by Drung"
</code>
</p>

====Java的层次结构====
<p>
Clojure的层级结构可以集成和扩展Java的类层级结构。除了符号和关键字之外，子也可以派生自Java类。在JDK中没有类能够跟幻想世界相匹配，但是你可以指定Java Date类是坏的：
<code>
user=> (derive java.util.Date ::evil)
</code>

isa?函数能够同时理解层级结构和Java类关系：
<code>
user=> (isa? java.util.Date ::evil)
true
user=> (isa? Float Number)
true
</code>

你可以定义多路方法，就像Java方法一样在类上进行分发。举个例子，invert多路方法，能同时工作在数字（取负数）和字符串（反转）上：
<code>
(defmulti invert class)
(defmethod invert Number `[x`]
    (- x))
(defmethod invert String `[x`]
    (apply str (reverse x)))
user=> (invert 3.14)
-3.14
user=> (invert
</code>
</p>

====更多的层次结构查询====
<p>
3个方法展示出了关于层次结构的更多的信息。
<code>
(parents tag)
(ancestors tag)
(descendants tag)
</code>

个方法都返回几何。parents返回当前亲标签，ancestors返回所有当前的和间接的亲。descendants返回所有的当前的和间接地子标签
parents和ancestors同样适用于Java类；descendants对Java类不适用（受限于Java的类型系统）。
<code>
user=> (parents ::orc)
#{:user/magical :user/evil}
user=> (descendants ::good)
#{:user/elf :user/hero :user/human}
user=> (parents ::hero)
#{:user/human}
user=> (ancestors ::hero)
#{:user/good :user/human}
user=> (parents java.util.Date)
#{java.lang.Object java.lang.Cloneable
    java.io.Serializable java.lang.Comparable
    :user/evil}
</code>
</p>

注意java.util.Date的祖先，包括Java类层次结构定义的和***derive***定义的。
====解决冲突====
<p>
因为Clojure的层级结构允许多继承，所以当多路方法有多个合法的选项的时候就会产生问题。Clojure不知道选择哪个，所以就会抛出异常。<br/>
举个例子，考虑在你的幻想游戏中，一个多路方法同时有分发值***::good***和***::magical***：
<code>
(defmulti slay :species)

 (defmethod slay ::good `[creature`]
    (str "Oh no! A good creature was slain!"))

 (defmethod slay ::magical `[creature`]
    (str "A magical creature was slain!"))
</code>

当你干掉一个人类或者一个兽人的时候，你确定会发生什么：
<code>
user=> (slay a) ;; human
"Oh no! A good creature was slain!"
user=> (slay d) ;; orc
"A magical creature was slain!"
</code>

但是如果你干掉一个精灵呢？
<code>
user=> (slay b)
java.lang.IllegalArgumentException:
Multiple methods in multimethod 'slay' match
dispatch value: :user/elf -> :user/magical
and :user/good, and neither is preferred
</code>

从这个异常中发现，::elf同时派生自::magical和::good，而它们都有slay方法。<br/>
为了解决这个问题，我们必须制定分发值的匹配顺序。prefer-method方法带一个多路方法为参数，指定哪个分发值比别的占优：
<code>
(prefer-method multimethod preferred-value other-value)
</code>

<code>
user=> (prefer-method slay ::good ::magical)
user=> (slay b)
"Oh no! A good creature was slain!"
</code>

第二种解决办法（其实不能算作一种解决方案），简单地移除其中一个冲突的方法。remove-method方法带一个多路方法为参数和一个分发值，它会删除该分发值对应的方法。
<code>
(remove-method multimethod dispatch-value)
</code>

<code>
user=> (remove-method slay ::magical)
user=> (slay b)
"Oh no! A good creature was slain!"
</code>
</p>

====类型标记====
<p>
***type***方法是***class***的一个通用的版本。***type***查找并返回关于它的参数的***:type***元数据（参考第8章）。如果那个对象没有***:type***元数据，或者不支持元数据，那么会返回对象所属的类：
<code>
user=> (type (with-meta {:name "Bob"} {:type ::person}))
:user/person
user=> (type 42)
java.lang.Integer
user=> (type {:name "Alice"})
clojure.lang.PersistentArrayMap
</code>

如果你用***:type***元数据重新定义游戏中的生物种族：
<code>
(def a (with-meta {:name "Arthur", :strength 8}
        {:type ::human}))
(def b (with-meta {:name "Balfor", :strength 7}
        {:type ::elf}))
</code>

你就可以重新定义***move***多路方法，以类型来分发：
<code>
(defmulti move type)

 (defmethod move ::elf `[creature`]
    (str (:name creature) " runs swiftly."))

 (defmethod move ::human `[creature`]
    (str (:name creature) " walks steadily."))
</code>

这就使得***move***多路方法能够同时处理元数据可用的Clojure的数据结构和原生的Java对象：
<code>
(defmethod move Number `[n`]
    (str "What?! Numbers don't move!"))

 user=> (move a)
"Arthur walks steadily."
user=> (move b)
"Balfor runs swiftly."
user=> (move 6.022)
"What?! Numbers don't move!"
</code>
</p>

===用户定义的层次结构===
<p>
除全局层次结构之外，你还可以创建你自己的独立的层次构。***makehierarchy***方法返回一个新的曾次结构（也就是一个亲、子关系的map）。***derive***、***isa?***、***parents***、***ancestors***和***descendants***方法都接受一个附加的first参数，指定使用的层次机构。<br/>
不同于全局层次机构，用户定义的层次机构允许使用非限定（没有名称空间）的关键字或者符号作为标签。<br/>
注意使用***derive***创建用户自定义层次机构时，有些许的不同。使用两个参数调用时，***derive***修改全局层次结构。但是用户定义的层次机构是不可变的，就像Clojure其他的数据结构一样，所以3参数版本的***derive***返回修改之后的层次结构。如下例所示：
<code>
user=> (def h (make-hierarchy))
user=> (derive h :child :parent)
user=> (isa? h :child :parent)
false
</code>

因此构建用户自定义层次机构的过程，必须跟***derive***语句串起来，就像下面例子里那样：
<code>
user=> (def h (-> (make-hierarchy)
                (derive :one :base)
                (derive :two :base)
                (derive :three :two)))
user=> (isa? h :three :base)
true
</code>

或者使用一个Clojure的可变类型的引用，像是***Var***：
<code>
user=> (def h (make-hierarchy))
user=> (isa? h :child :parent)
false
user=> (alter-var-root (var h) derive :child :parent)
user=> (isa? h :child :parent)
true
</code>

默认，多路方法使用全局层次结构。***defmulti***接受一个可选参数***:hierarchy***，后跟一个将要使用的不同的层次结构。
</p>

===总结===
<p>
多路方法非常灵活，但是灵活性是有代价的：不是很高效。考虑一下每次我们调用多路方法时候会发生什么：为了能找到正确的方法，它不得不去调用一个分发函数，查找哈希表里的分发值，然后最少做一次***isa?***对比。像Hotspot这样的小型编译器再优化的烂点儿，oh, my God<br/>
结果就是，多路方法对于频繁调用的低级别函数不适合。这就是Clojure的内置函数都不用多路方法实现的原因。尽管如此，它用来创建可扩展的高级别API是非常棒的。分别在1.2节和13章介绍和详细描述的协议，提供了一个严格的方法分发的形式，并有着不错的性能。
</p>


==译者注==
参考 [http://www.ibm.com/developerworks/cn/linux/l-r3.html 使用R编写统计程序，第3部分:可重用和面向对象编程] 面向对象的R